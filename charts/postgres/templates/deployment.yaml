# -*- mode: k8s -*-
kind: Deployment
apiVersion: apps/v1
metadata:
  name: {{ template "postgres.fullname" . }}
  labels:
    {{- include "postgres.labels" . | nindent 4 }}
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      {{- include "postgres.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "postgres.labels" . | nindent 8 }}
    spec:
      volumes:
        - name: config-map
          configMap:
            name: {{ template "postgres.fullname" . }}
        {{ if .Values.config.pg_hba -}}
        - name: config
          emptyDir: {}
        {{- end }}
        {{ if .Values.persistence.enabled -}}
        - name: data
          persistentVolumeClaim:
            claimName: {{ template "postgres.fullname" . }}
        {{- end }}
      initContainers:
        {{ if .Values.config.pg_hba -}}
        - name: config
          image: {{ .Values.image.repository}}:{{ .Values.image.tag }}
          volumeMounts:
            - name: config-map
              mountPath: /pg_hba.conf
              subPath: pg_hba.conf
            - name: config
              mountPath: /config
          command: [/bin/sh, -c, 'cp /pg_hba.conf /config/pg_hba.conf']
        {{- end }}
      containers:
        - name: postgres
          image: {{ .Values.image.repository}}:{{ .Values.image.tag }}
          volumeMounts:
            {{ if .Values.persistence.enabled -}}
            - name: data
              mountPath: /var/lib/postgresql/data
              subPath: data
            {{- end }}
            {{ if .Values.config.pg_hba -}}
            - name: config
              mountPath: /var/lib/postgresql/data/pg_hba.conf
              subPath: pg_hba.conf
            {{- end }}
          env:
            - name: POSTGRES_USER
              value: {{ tpl .Values.user . }}
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ template "postgres.fullname" . }}
                  key: password
            - name: POSTGRES_DB
              value: {{ tpl .Values.db . }}
          startupProbe:
            exec:
              command: ['pg_isready', '-U', {{ tpl .Values.user . | quote }}, '-d', {{ tpl .Values.db . | quote }}, '-h', '127.0.0.1']
          livenessProbe:
            exec:
              command: ['pg_isready', '-U', {{ tpl .Values.user . | quote }}, '-d', {{ tpl .Values.db . | quote }}, '-h', '127.0.0.1']
          readinessProbe:
            exec:
              command: ['pg_isready', '-U', {{ tpl .Values.user . | quote }}, '-d', {{ tpl .Values.db . | quote }}, '-h', '127.0.0.1']
        {{- if .Values.metrics.enabled }}
        - name: metrics
          image: bitnami/postgres-exporter
          env:
            - name: DATA_SOURCE_URI
              value: '127.0.0.1/{{ tpl .Values.db . }}?sslmode=disable'
            - name: DATA_SOURCE_PASS
              valueFrom:
                secretKeyRef:
                  name: {{ template "postgres.fullname" . }}
                  key: password
            - name: DATA_SOURCE_USER
              value: {{ tpl .Values.user . | quote }}
          ports:
            - name: metrics
              containerPort: 9187
          startupProbe:
            tcpSocket:
              port: metrics
          livenessProbe:
            httpGet:
              path: /metrics
              port: metrics
          readinessProbe:
            httpGet:
              path: /metrics
              port: metrics
        {{- end }}
